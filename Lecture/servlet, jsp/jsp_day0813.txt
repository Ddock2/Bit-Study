* response.sendRedirect(url)
	: 호출된 페이지에서 다른 페이지로 요청 처리가 이동
	  요청이 재 발생되어 공유영역 데이터 공유가 되지 않음
	  url은 마지막 jsp파일로 됨
	
	클라이언트 => test1.jsp => 클라이언트 => test2.jsp => 클라이언트(http://localhost:8000/test2.jsp)
	
	구문 : response.sendRedirect(url);
		<%
			response.senRedirec("test1.jsp");
		%>

		<%
			response.senRedirec("test1.jsp?id=" + request.getParameter("id");
		%>

---------------------------------------------------------------------------------------------------------------------------------
< 상태정보 유지기술(쿠키, 세션) >
	
	* 쿠키(Cookie)

		- 특성
		 	정보저장 위치 - 사용자 컴퓨터
			서버의 부하 분산
			보안상의 문제 발생↗
			정보저장 유효기간을 사용자가 설정(브라우저가 닫힌 이후에도 유지)
			한 사이트에서 저장할 수 있는 쿠키 객체는 한정되어 있음(20개)
			컴퓨터에 쿠키 한계치(300개)가 오게 되면 랜덤하게 저장 되어있는 쿠키 삭제
			쿠키의 정보저장은 문자열만 가능
			한글 저장 시에는 인코딩을 반드시 해야 가능
			
		- 생성/읽기
			쿠키 생성 및 전송하기
				<%
					Coookie cookie = new Cookie("cookieName"."cookieValue");
				%>
			
			쿠키 객체 얻어오기
				Cookie[] cookies = request.getCookies();
			
			Cookie 객체 중요 API
				getName()
				getValue()

		- 구성
			이름(name)
			값(value)
			유효시간(maxAge)
			도메인(domain)
			경로(path)

		- 쿠키 이름 제약
			아스키 코드의 알파벳과 숫자만을 포함할 수 있다
			콤마(,), 세미클론(;), 공백(' ')등의 문자는 포함 할 수 없다
			'$'로 시작할 수 없다
		
		- 쿠키의 인코딩/디코딩
			쿠키는 값으로 한글과 같은 문자를 가질 수 없음
			쿠키 값 처리
				설정하고자 하는 값의 인코딩 :
					URLEncoder.encode("값", 방식)

					String cName = "한글이름";
					         cName = URLEncoder.encode(cName, "utf-8");

				설정하고자 하는 값의 인코딩 :
					URLDecoder.decode("값", 방식)

					String cName = "한글이름";
					         cName = URLDecoder.decode(cName, "utf-8");
		- 쿠키 유효시간
			쿠키의 유효 시간 설정
				Cookie.setMaxAge(int maxAge) : 초 단위 설정
				유효시간 미 지정 시, 웹브라우저 닫을 때 쿠키도 함께 삭제
					setMaxAge(0) : 쿠키삭제
					setMaxAge(-1) : 브라우저 닫을때 쿠키 삭제
					setMaxAge(60*60*24) : 1일 설정

		- 쿠키 도메인
			쿠키 도메인 지정 시 해당 도메인에 쿠키 전달
				Cookie.setDomain(String domain)
					.bitacademy.net - 으로 시작하는 경우 관련 도메인에 모두 쿠키를 전송
		
		- 쿠키 경로
			설정된 경로를 기준으로 쿠키 전달
				Cookie.setPath(String Path)
				경로 미 설정 시, 요청 URL의 경로에 대해서만 쿠키 전달
				경로 설정시 설정한 경로에 대해서만 전달(그 밑에 경로도 전부)
		
	* 세션(Session)
		: 웹 컨테이너에서 클라이언트의 정보를 보관할 때 사용
		  오직 서버에서만 생성
		  클라이언트마다 세션이 생성
		
		- 특성
		 	정보저장 위치 - 서버
			서버의 부하 가중
			보안상의 문제 발생↘
			정보저장 최대 유효기간이 브라우저가 닫힐 때 까지
			정보 저장 시 객체타입이 가능
		
		- page 지시자의 session 속성 값을 true로 지정(default값 true)
			session 존재하지 않을 시 생성, 있으면 있는거 씀
			<% @page session = "true" %>
		
		- 세션 종료/ 타임 아웃
			세션 타임아웃 시간 설정

			1) web.xml에 설정(분 단위)
				<session-config>
					<session-timeout>
						30
					</session-timeout>
				</session-config>
		 
			2) 프로그램에서 설정(API 활용 - 초단위)
				session.setMaxInactiveInterval(int interval);
		
		- 세션 주요 API 메소드
			세션 객체 얻기
				javax.servlet.http.HttpServletRequest.getSession()
				javax.servlet.http.HttpServletRequest.getSession(Boolean creat);
		
			세션 입력 		: session.setAttribute(,);
			세션 값 받기 	: session.getAttribute();
			세션 삭제 		: session.removeAttribute();
			세션 삭제 		: session.invalidate();
		
		