* 공유영역 범위
	- pageContext	: 하나의 jsp안에서만
	- request		: request에서 response사이에 거쳐지는 jsp들끼리만
	- session		: 연결을 한 하나의 클라이언트 웹브라우저에서만
	- application	: 모두

* EL에서의 객체 표현 이해
	
	1. ${ 객체.이름 }
		- 객체 자리에 올 수 있는 타입 : 자바빈즈 클래스, 맵 객체
			@ 자바빈즈 클래스 형태 	: 패키지로 선언		// VO클래스와 비슷
						  클래스는 public 선언
						  매개변수 없는 생성자 선언
						  멤버변수는 private 선언
						  멤버변수에 대한 setter, getter
			@ 맵 객체			: key, value 가짐
	
		1) 객체 타입이 자바빈즈인 경우
			- ${ board.no } => no는 board의 get 메소드를 의미
		2) 객체 타입이 맵 객체인 경우
			- ${ board.no } => no는 맵의 key를 의미, value 출력

	2. ${ 객체[숫자] }
		- 객체 자리에 올 수 있는 타입 : 배열, 콜렉션

-----------------------------------------------------------------------------------------------------------------------------

< JSTL >
	- 개발자들이 개별적으로 만들어 쓰던 태그 중 자주 사용되는 태그를 표준으로 만들어서 제공

★	- core 태그	: 프로그램에서 많이 사용되는 기본 태그 제공
	- fmt 태그		: 다국어 지원, 로케일 제공, 메시지 처리, 숫자, 날짜 포멧팅
	- 함수
	- sql 태그
	- xml 태그
	
	* 다운로드
		http://tomcat.apache.org -> Taglibs ->Download -> Standard-1.2.5 Jar Files 4개 받음
		WEB-INF/lib 폴더에 저장
		서버 restart
	
	* core -set 태그
		     : 공유 영역에 변수 설정 시 사용
		- 형식	: <c:set var="" value="" [scope=""] />		// scope는 선택(안쓰면 page)
		- 속성
			var	: 설정할 변수명
			value	: 설정할 값
			scope	: 변수의 사용 영역( page, request, session, application )
				  기본설정 영역 : page
			ex)
			<c:set var="cnt" value="1" scope="page" />
	
	* core -remove 태그
		     : 공유 영역에 변수 삭제 시 사용
		- 형식	: <c:remove var="" [scope=""] />		// scope 안쓰면 모든영역 동일한 변수명 다 지움
		- 속성
			var	: 삭제할 변수명
			scope	: 삭제할 변수가 설정되어 있는 영역
			ex)
			<c:remove var="cnt" scope="page" />

	* core -out 태그
		     : getAttribute 대체
		      출력 전용 태그(보안성↗)
		- 형식	: <c:out value="" [escapeXml="true/false"] [default=""]  />
		- 속성
			value	  : 출력할 내용을 지정
			escapeXml  : true일 경우 - 출력내용에 태그가 있을 경우 문자값으로 변경처리	// 기본 = true
				    false일 경우 - 출력내용에 태그가 있을 경우 태그 내용으로 처리	
			default	  : value 속성의 값이 없을 경우 디폴트로 출력할 내용을 지정

			ex)
			<c:out value="JSTL" />
			<c:out value="${ msg }" default="msg없다"/>
			<c:out value="<hr>" escapeXml="true" />
			<c:out value="<hr>" escapeXml="false" />

	* core -if 태그
		     : 조건에 따라 내용을 실행
		- 형식	: <c:if test="조건">
				조건이 참일 경우 실행할 내용
			  </c:if>
		- 속성
			test	: 참과 거짓을 판단하는 조건을 명시

			ex)
			<c:if test="${5==5}">
				5==5 와 같습니다
			</c:if>
	
	* core -choose 태그
		     : 다중 조건 처리 태그
		- 형식	: <c:choose>
				<c:when test="">
					조건이 참일 경우 실행할 내용
				</c:when>
				...
				<c:otherwise>
					when 절이 모두 거짓일 경우 실행할 내용
				</c:otherwise>
			  </c:choose>
		- 속성
			test	: 참과 거짓을 판단하는 조건을 명시
		
		when에서 하나라도 만족하면 switch문처럼 choose 빠져나감
		otherwise가 위 모든 조건이 거짓이어야 실행

	* core -forEach 태그
		     : 반복문 처리 태그
		- 형식	: <c:forEach var="" items="" [varStatus=""]>	// 배열, 콜렉션 객체 반복
				반복 시 처리 할 문장
			  </c:forEach>

			  <c:forEach var="" begin="" end="" [step=""]>	// 지정횟수만큼 반복
				반복 시 처리 할 문장			// step은 증가폭 조절
			  </c:forEach>
		- 속성
			var	: 반복문에서 사용 할 변수명 지정
			item	: 반복시킬 대상 객체 지정 (배열 또는 콜렉션)
			varStatus	: 변수명, 반복과 관련된 기본 정보를 담고 있는 객체
				varStatus="loop"
					loop.first	  : 처음인지 (boolean)
					loop.last	  : 마지막인지
					loop.index	  : 몇번째(0부터)
					loop.count  : 몇번째(1부터)
				

			ex)
			request.setAttribute("strArr", strArr);
			<c:forEach var="s" items="${strArr}">
				${s}
			</c:forEach>

			<c:forEach var="i" begin="1" end="10">
				${i}
			</c:forEach>
	
-----------------------------------------------------------------------------------------------------------------------------
  공유영역 4가지
	[JSP]		[EL]		[JSTL]
	pageContext	pageScope	page
	request		requestScope	request
	session		sessionScope	session
	application	applicationScope	application
-----------------------------------------------------------------------------------------------------------------------------
	
	